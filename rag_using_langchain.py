# -*- coding: utf-8 -*-
"""RAG Using Langchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oxF1Ht8vPvFXoQyPqLHOIkKpp6MxRZpg
"""

import os
os.environ["COHERE_API_KEY"] = "HTE1Mb3d9dKp9qxj30rYr4sDJSlv0qr2Iuv0msMC"

"""**Install libraries**"""

!pip install -q cohere youtube-transcript-api langchain-community langchain-cohere \
               faiss-cpu python-dotenv

from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_cohere import CohereEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate

"""# **Step 1a - Indexing (Document Ingestion)**"""

video_id = "Gfr50f6ZBvo"  # Only the ID
try:
    transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=["en"])
    transcript = " ".join(chunk["text"] for chunk in transcript_list)
    print(transcript)
except TranscriptsDisabled:
    print("No captions available for this video.")

transcript_list

"""# **Step 1b - Indexing (Text Splitting)**"""

splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
chunks = splitter.create_documents([transcript])

len(chunks)

chunks[100]

"""# **Step 1c & 1d - Indexing (Embedding Generation and Storing in Vector Store)**"""

# Create embeddings with Cohere, specifying the model
embeddings = CohereEmbeddings(cohere_api_key=os.environ["COHERE_API_KEY"], model="embed-english-v2.0") # Added model parameter

# Extract the text content from the Document objects
texts = [chunk.page_content for chunk in chunks]

# Create FAISS vector store using the extracted texts
vector_store = FAISS.from_texts(texts, embeddings)

vector_store.index_to_docstore_id

vector_store.get_by_ids(['41dcaa9c-e649-4fa3-8c48-8a7cb3415f07'])

"""# **Step 2 - Retrieval**"""

retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 4})

retriever

retriever.invoke('What is deepmind')

"""# **Step 3 - Augmentation**"""

from langchain_cohere import ChatCohere

llm = ChatCohere(
    model="command-r-plus",   # Best Cohere model for chatting as of now
    temperature=0.2
)

prompt = PromptTemplate(
    template="""
      You are a helpful assistant.
      Answer ONLY from the provided transcript context.
      If the context is insufficient, just say you don't know.

      {context}
      Question: {question}
    """,
    input_variables = ['context', 'question']
)

question          = "is the topic of nuclear fusion discussed in this video? if yes then what was discussed"
retrieved_docs    = retriever.invoke(question)

retrieved_docs

context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
context_text

final_prompt = prompt.invoke({"context": context_text, "question": question})

final_prompt

"""# **Step 4 - Generation**"""

answer = llm.invoke(final_prompt)
print(answer.content)

"""# **Building a Chain**"""

from langchain_core.runnables import RunnableParallel, RunnablePassthrough, RunnableLambda
from langchain_core.output_parsers import StrOutputParser

def format_docs(retrieved_docs):
  context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
  return context_text

parallel_chain = RunnableParallel({
    'context': retriever | RunnableLambda(format_docs),
    'question': RunnablePassthrough()
})

parallel_chain.invoke('who is Demis')

parser = StrOutputParser()

main_chain = parallel_chain | prompt | llm | parser

main_chain.invoke('Can you summarize the video')